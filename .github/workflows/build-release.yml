name: Build and Release Glyph

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    name: Build on ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller pyside6 argon2-cffi cryptography

      - name: Compile Qt Resources
        run: pyside6-rcc resources.qrc -o resources_rc.py

      - name: Build with PyInstaller (Linux)
        if: runner.os == 'Linux'
        run: |
          pyinstaller --name Glyph --onefile --windowed glyph.py

      - name: Build with PyInstaller (macOS)
        if: runner.os == 'macOS'
        run: |
          pyinstaller --name Glyph --onefile --windowed --icon="glyph.icns" glyph.py

      - name: Build with PyInstaller (Windows)
        if: runner.os == 'Windows'
        run: |
          pyinstaller --name Glyph `
                      --onefile `
                      --windowed `
                      --icon="glyph.ico" `
                      glyph.py
        shell: powershell

      - name: Package the application for release
        shell: bash
        run: |
          if [[ "${{ runner.os }}" == "Linux" ]]; then
            tar -czvf Glyph-Linux.tar.gz -C dist/ Glyph
            echo "ASSET_PATH=Glyph-Linux.tar.gz" >> $GITHUB_ENV
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            ditto -c -k --sequesterRsrc --keepParent dist/Glyph.app Glyph-macOS.zip
            echo "ASSET_PATH=Glyph-macOS.zip" >> $GITHUB_ENV
          elif [[ "${{ runner.os }}" == "Windows" ]]; then
            powershell -Command "Compress-Archive -Path dist/Glyph.exe -DestinationPath Glyph-Windows.zip"
            echo "ASSET_PATH=Glyph-Windows.zip" >> $GITHUB_ENV
          fi

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ runner.os }}
          path: ${{ env.ASSET_PATH }}

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display structure of downloaded files
        run: ls -R artifacts

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v1
        with:
          files: artifacts/*/*
