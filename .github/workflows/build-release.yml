name: Build and Release Glyph

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    name: Create Installer for ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller pyside6 argon2-cffi cryptography

      - name: Compile Qt Resources
        run: pyside6-rcc resources.qrc -o resources_rc.py

      - name: Build Executable with PyInstaller
        run: |
          pyinstaller --name Glyph \
                      --noconfirm \
                      --onefile \
                      --windowed \
                      --icon="${{ runner.os == 'Windows' && 'glyph.ico' || runner.os == 'macOS' && 'glyph.icns' || 'glyph.png' }}" \
                      glyph.py
        shell: bash

      # ===================================================================
      #  PLATFORM-SPECIFIC INSTALLER CREATION
      # ===================================================================

      # --- Linux AppImage ---
      - name: Create Linux AppImage
        if: runner.os == 'Linux'
        run: |
          # 1. Create the .desktop file dynamically
          echo "[Desktop Entry]
          Name=Glyph
          Exec=Glyph
          Icon=glyph
          Type=Application
          Categories=Utility;Security;
          Comment=A modern and secure password manager.
          " > glyph.desktop

          # 2. Download AppImage tools
          wget -c "https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage"
          wget -c "https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releases/download/continuous/linuxdeploy-plugin-qt-x86_64.AppImage"
          chmod +x linuxdeploy*.AppImage

          # 3. Run linuxdeploy, using the file we just created
          ./linuxdeploy-x86_64.AppImage --appdir AppDir \
            --executable dist/Glyph \
            --desktop-file glyph.desktop \
            --icon-file glyph.png \
            --plugin qt \
            --output appimage
          
          # 4. Rename and prepare the asset
          mv Glyph-x86_64.AppImage Glyph-Linux.AppImage
          echo "ASSET_PATH=Glyph-Linux.AppImage" >> $GITHUB_ENV

      # --- macOS DMG ---
      - name: Create macOS DMG
        if: runner.os == 'macOS'
        run: |
          brew install create-dmg
          create-dmg \
            --volname "Glyph Installer" \
            --window-pos 200 120 \
            --window-size 800 400 \
            --icon-size 100 \
            --icon "Glyph.app" 200 190 \
            --hide-extension "Glyph.app" \
            --app-drop-link 600 185 \
            "Glyph-macOS.dmg" \
            "dist/Glyph.app"
          echo "ASSET_PATH=Glyph-macOS.dmg" >> $GITHUB_ENV

      # --- Windows Installer ---
      - name: Create Windows Installer
        if: runner.os == 'Windows'
        run: |
          # 1. Install Inno Setup
          choco install innosetup

          # 2. Create the Inno Setup script (.iss) dynamically
          @"
          [Setup]
          AppName=Glyph
          AppVersion=${{ github.ref_name }}
          DefaultDirName={autopf}\Glyph
          DefaultGroupName=Glyph
          OutputBaseFilename=Glyph-Setup
          Compression=lzma2
          SolidCompression=yes
          WizardStyle=modern
          UninstallDisplayIcon={app}\Glyph.exe
          SetupIconFile=glyph.ico

          [Files]
          Source: "dist\Glyph.exe"; DestDir: "{app}"; Flags: ignoreversion

          [Icons]
          Name: "{group}\Glyph"; Filename: "{app}\Glyph.exe"
          Name: "{autodesktop}\Glyph"; Filename: "{app}\Glyph.exe"; Tasks: desktopicon

          [Tasks]
          Name: "desktopicon"; Description: "Create a &desktop icon"; GroupDescription: "Additional icons:";

          [Run]
          Filename: "{app}\Glyph.exe"; Description: "Launch Glyph"; Flags: nowait postinstall skipifsilent
          "@ | Out-File -FilePath "install.iss" -Encoding "utf8"

          # 3. Run the Inno Setup compiler, using the file we just created
          & "C:\Program Files (x86)\Inno Setup 6\iscc.exe" "install.iss"
          
          # 4. Rename and prepare the asset
          Rename-Item -Path "Output\Glyph-Setup.exe" -NewName "Glyph-Windows-Setup.exe"
          "ASSET_PATH=Glyph-Windows-Setup.exe" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        shell: powershell

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: installer-${{ runner.os }}
          path: ${{ env.ASSET_PATH }}

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Download all installer artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display structure of downloaded files
        run: ls -R artifacts

      - name: Create Release and Upload Installers
        uses: softprops/action-gh-release@v1
        with:
          files: artifacts/*/*
