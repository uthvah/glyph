name: Build and Release Glyph

# This workflow runs when a new tag is pushed that starts with 'v' (e.g., v1.0.0, v1.1.2)
on:
  push:
    tags:
      - 'v*'

jobs:
  # Job 1: Build the application on all three platforms
  build:
    name: Build on ${{ matrix.os }}
    # Use a matrix strategy to run this job on all 3 OSes in parallel
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout repository code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install Qt Dependencies (Linux only)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-render-util0 libxcb-xinerama0 libxcb-xinput0 libegl1 libopengl0 xvfb

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller pyside6 argon2-cffi cryptography

    - name: Compile Qt Resources
      # On Linux, wrap this command in xvfb-run
      if: runner.os == 'Linux'
      run: xvfb-run --auto-servernum pyside6-rcc resources.qrc -o resources_rc.py
      # On other OSes, run normally
      if: runner.os != 'Linux'
      run: pyside6-rcc resources.qrc -o resources_rc.py

    - name: Build with PyInstaller
      # On Linux, wrap this command in xvfb-run
      if: runner.os == 'Linux'
      run: |
        xvfb-run --auto-servernum pyinstaller --name Glyph \
                    --onefile \
                    --windowed \
                    glyph.py
    # On other OSes, run normally
    - name: Build with PyInstaller (macOS)
      if: runner.os == 'macOS'
      run: |
        pyinstaller --name Glyph \
                    --onefile \
                    --windowed \
                    --icon="glyph.icns" \
                    glyph.py
    - name: Build with PyInstaller (Windows)
      if: runner.os == 'Windows'
      run: |
        pyinstaller --name Glyph \
                    --onefile \
                    --windowed \
                    --icon="glyph.ico" \
                    glyph.py
    
    - name: Prepare Artifacts for Release
      id: prep_artifacts # Give this step an ID
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
          mkdir release && mv dist/Glyph release/Glyph-Linux-x86_64
          echo "artifact_path=release/Glyph-Linux-x86_64" >> $GITHUB_OUTPUT
          echo "artifact_name=Glyph-Linux-x86_64" >> $GITHUB_OUTPUT
        elif [ "$RUNNER_OS" == "macOS" ]; then
          mkdir release && zip -r release/Glyph-macOS.zip dist/Glyph.app
          echo "artifact_path=release/Glyph-macOS.zip" >> $GITHUB_OUTPUT
          echo "artifact_name=Glyph-macOS.zip" >> $GITHUB_OUTPUT
        elif [ "$RUNNER_OS" == "Windows" ]; then
          mkdir release && mv dist/Glyph.exe release/Glyph-Windows.exe
          echo "artifact_path=release/Glyph-Windows.exe" >> $GITHUB_OUTPUT
          echo "artifact_name=Glyph-Windows.exe" >> $GITHUB_OUTPUT
        fi
      shell: bash

    - name: Upload Build Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.prep_artifacts.outputs.artifact_name }}
        path: ${{ steps.prep_artifacts.outputs.artifact_path }}

  # Job 2: Create the GitHub Release after all builds are successful
  release:
    name: Create GitHub Release
    # This job depends on the 'build' job finishing successfully for all OSes
    needs: build
    runs-on: ubuntu-latest

    permissions:
      contents: write # This is required to create a release

    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: List downloaded files
        run: ls -R artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          # This creates a draft release. Remove 'draft: true' to publish immediately.
          draft: false
          prerelease: false
          files: |
            artifacts/Glyph-Windows.exe/*
            artifacts/Glyph-macOS.zip/*
            artifacts/Glyph-Linux-x86_64/*
